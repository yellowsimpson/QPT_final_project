import numpy as np
import cv2
import cv2.aruco as aruco
import serial
import time
import threading

# 시리얼 통신 초기화
ser = serial.Serial('ttyAMA1', 9600, timeout=1)
time.sleep(2)  # Arduino가 준비될 때까지 대기

# 카메라 매트릭스와 왜곡 계수
camera_matrix = np.array([[346.22731839, 0, 158.69894919],
                          [0, 342.83060323, 102.81898802],
                          [0, 0, 1]])
dist_coeffs = np.array([-0.248298021, 3.67515380, -0.0072319964, -0.0422742736, -14.9854503])

# ArUco 마커 설정
aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_6X6_250)
parameters = aruco.DetectorParameters()

# 마커 크기 (미터 단위)
marker_size = 0.055  # 55mm

# 전역 변수
frame = None
ret = False
stop_threads = False

# 값 안정화를 위한 필터 변수
angle_history = []
distance_history = []

# 필터 함수
def moving_average(new_value, history, window_size=5):
    history.append(new_value)
    if len(history) > window_size:
        history.pop(0)
    return sum(history) / len(history)

# 카메라 캡처 함수 (스레드)
def camera_capture():
    global frame, ret, stop_threads
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    if not cap.isOpened():
        print("카메라를 열 수 없습니다.")
        return

    while not stop_threads:
        ret, frame = cap.read()
        if not ret:
            print("프레임을 읽을 수 없습니다.")
            time.sleep(0.1)

    cap.release()
    print("카메라 스레드 종료")

# 모터 제어 명령 전송 함수
def send_motor_command(command):
    try:
        ser.write(command.encode())
        print(f"명령 전송: {command.strip()}")
    except serial.SerialException as e:
        print(f"명령 전송 중 오류 발생: {e}")

# 메인 로직
def main():
    global frame, ret, stop_threads

    # 카메라 캡처 스레드 시작
    camera_thread = threading.Thread(target=camera_capture)
    camera_thread.start()

    try:
        while True:
            if ret and frame is not None:
                # 그레이스케일 변환 및 마커 탐지
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                corners, ids, rejected = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

                if ids is not None and len(ids) > 0:
                    aruco.drawDetectedMarkers(frame, corners, ids)

                    # 첫 번째 마커만 사용
                    i = 0
                    rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners[i], marker_size, camera_matrix, dist_coeffs)

                    # 회전 벡터 -> 회전 행렬 -> 각도 계산
                    rotation_matrix, _ = cv2.Rodrigues(rvec[0])
                    theta_m = np.arctan2(rotation_matrix[2, 0], rotation_matrix[0, 0])  # Z축 기준 각도 계산
                    angle_deg = 90 + np.degrees(theta_m)  # 정면이 90도로 보이도록 보정

                    # 마커까지의 거리 계산
                    distance = np.linalg.norm(tvec[0][0])

                    # 필터 적용
                    angle_deg = moving_average(angle_deg, angle_history)
                    distance = moving_average(distance, distance_history)

                    # 화면에 각도 및 거리 표시
                    cv2.putText(frame, f"Angle: {angle_deg:.2f} deg", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
                    cv2.putText(frame, f"Distance: {distance:.2f} m", (10, 70),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

                    # 제어 로직
                    angle_difference = angle_deg - 90  # 원하는 각도는 90도
                    command = ''
                    speed = 50  # 모든 동작의 기본 속도

                    # 목표 조건: 각도 89~91도, 거리 15cm
                    angle_threshold = 1.0  # 각도 허용 오차
                    target_distance = 0.15  # 목표 거리 (미터)
                    distance_threshold = 0.02  # 거리 허용 오차 (미터)

                    if abs(angle_difference) > angle_threshold:
                        if angle_difference > 0:  # 90도보다 크면 왼쪽으로 회전
                            command = f'241,cc,{int(speed)}\n'
                        elif angle_difference < 0:  # 90도보다 작으면 오른쪽으로 회전
                            command = f'241,cw,{int(speed)}\n'
                    elif distance > target_distance + distance_threshold:
                        command = f'240,{speed},{speed},{speed},{speed}\n'  # 전진
                    elif distance < target_distance - distance_threshold:
                        command = f'240,{-speed},{-speed},{-speed},{-speed}\n'  # 후진
                    else:
                        command = f'240,0,0,0,0\n'  # 정지
                        print("목표 위치에 도달: 정지")

                    if command:
                        send_motor_command(command)

                else:
                    print("마커를 찾지 못했습니다. 정지 상태 유지 중...")
                    send_motor_command(f'240,0,0,0,0\n')  # 정지 상태 유지

                # 화면 출력
                cv2.imshow("AR Marker Detection", frame)

            key = cv2.waitKey(1)
            if key == 27:  # ESC 키를 누르면 종료
                break

    except Exception as e:
        print(f"예기치 않은 오류 발생: {e}")

    finally:
        stop_threads = True
        camera_thread.join()  # 카메라 스레드 종료 대기
        ser.close()
        cv2.destroyAllWindows()
        print("프로그램 종료")

if __name__ == "__main__":
    main()
